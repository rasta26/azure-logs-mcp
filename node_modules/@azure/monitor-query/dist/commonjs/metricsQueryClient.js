"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsQueryClient = void 0;
const tracing_js_1 = require("./tracing.js");
const index_js_1 = require("./generated/metrics/src/index.js");
const index_js_2 = require("./generated/metricsdefinitions/src/index.js");
const index_js_3 = require("./generated/metricsnamespaces/src/index.js");
const modelConverters_js_1 = require("./internal/modelConverters.js");
const constants_js_1 = require("./constants.js");
/**
 * A client that can query metrics, get metric definitions and get metric namespaces.
 *
 * @deprecated For resource-centric metrics queries, use the management library `@azure/arm-monitor` instead.
 * Migrate your code following the migration guide at https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/arm-monitor/MIGRATION_METRICSQUERYCLIENT_TO_ARM_MONITOR.md
 */
class MetricsQueryClient {
    _metricsClient;
    _definitionsClient;
    _namespacesClient;
    /**
     * Creates a MetricsQueryClient.
     * @param tokenCredential - A TokenCredential that has rights to query metrics on resources.
     * @param options - Options for the client like controlling request retries.
     */
    constructor(tokenCredential, options) {
        const scope = options?.audience
            ? `${options.audience}/.default`
            : `${constants_js_1.KnownMonitorMetricsQueryAudience.AzurePublicCloud}/.default`;
        const packageDetails = `azsdk-js-monitor-query/${constants_js_1.SDK_VERSION}`;
        const userAgentPrefix = options?.userAgentOptions && options?.userAgentOptions.userAgentPrefix
            ? `${options?.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const serviceClientOptions = {
            ...options,
            $host: options?.endpoint,
            endpoint: options?.endpoint,
            credentialScopes: scope,
            credential: tokenCredential,
            userAgentOptions: {
                userAgentPrefix,
            },
        };
        this._metricsClient = new index_js_1.MonitorManagementClient(index_js_1.KnownApiVersion20240201.TwoThousandTwentyFour0201, serviceClientOptions);
        this._definitionsClient = new index_js_2.MonitorManagementClient(index_js_2.KnownApiVersion20240201.TwoThousandTwentyFour0201, serviceClientOptions);
        this._namespacesClient = new index_js_3.MonitorManagementClient(index_js_3.KnownApiVersion20240201.TwoThousandTwentyFour0201, serviceClientOptions);
    }
    /**
     * Query metrics, given a resource URI
     * @param resourceUri - The resource URI to query.
     * @param metricNames - The names of the metrics to retrieve.
     * @param options - Options for querying metrics.
     * @returns A response containing metrics.
     */
    async queryResource(resourceUri, metricNames, options = {}) {
        return tracing_js_1.tracingClient.withSpan("MetricsQueryClient.queryResource", options, async (updatedOptions) => {
            const response = await this._metricsClient.metrics.list(resourceUri, (0, modelConverters_js_1.convertRequestForMetrics)(metricNames, updatedOptions));
            return (0, modelConverters_js_1.convertResponseForMetrics)(response);
        });
    }
    /**
     * List alert segments for Metric Definitions
     */
    async *listSegmentOfMetricDefinitions(resourceUri, options = {}) {
        const segmentResponse = await tracing_js_1.tracingClient.withSpan("MetricsQueryClient.listSegmentOfMetricDefinitions", options, async (updatedOptions) => this._definitionsClient.metricDefinitions.list(resourceUri, (0, modelConverters_js_1.convertRequestOptionsForMetricsDefinitions)(updatedOptions)));
        yield (0, modelConverters_js_1.convertResponseForMetricsDefinitions)(segmentResponse.value);
    }
    /**
     * List items for Metric Definitions
     */
    async *listItemsOfMetricDefinitions(resourceUri, options) {
        for await (const segment of this.listSegmentOfMetricDefinitions(resourceUri, options)) {
            if (segment) {
                yield* segment;
            }
        }
    }
    /**
     *   /**
     *
     * Returns an async iterable iterator to list metric definitions.
     *
     * Example using `for await` syntax:
     *
     * ```ts snippet:MetricQueryClientListMetricDefinitions
     * import { DefaultAzureCredential } from "@azure/identity";
     * import { MetricsQueryClient } from "@azure/monitor-query";
     *
     * const metricsResourceId = "<the Resource Id for your metrics resource>";
     *
     * const tokenCredential = new DefaultAzureCredential();
     * const metricsQueryClient = new MetricsQueryClient(tokenCredential);
     *
     * const metricDefinitions = metricsQueryClient.listMetricDefinitions(metricsResourceId);
     * for await (const { id, name } of metricDefinitions) {
     *   console.log(` metricDefinitions - ${id}, ${name}`);
     * }
     * ```
     *
     * Get a list of metric definitions, given a resource URI.
     * @param resourceUri - The resource URI to get metric definitions for.
     * @param options - Options for getting metric definitions.
     * @returns Metric definitions for a given resource URI.
     */
    listMetricDefinitions(resourceUri, options) {
        const iter = this.listItemsOfMetricDefinitions(resourceUri, options);
        return {
            /**
             * The next method, part of the iteration protocol
             */
            next() {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */
            [Symbol.asyncIterator]() {
                return this;
            },
            /**
             * @returns an AsyncIterableIterator that works a page at a time
             */
            byPage: () => {
                return this.listSegmentOfMetricDefinitions(resourceUri, options);
            },
        };
    }
    /**
     * List alert segments for Metric Namespaces
     */
    async *listSegmentOfMetricNamespaces(resourceUri, options = {}) {
        const segmentResponse = await tracing_js_1.tracingClient.withSpan("MetricsQueryClient.listSegmentOfMetricNamespaces", options, async (updatedOptions) => this._namespacesClient.metricNamespaces.list(resourceUri, updatedOptions));
        yield (0, modelConverters_js_1.convertResponseForMetricNamespaces)(segmentResponse.value);
    }
    /**
     * List items for Metric Namespaces
     */
    async *listItemsOfMetricNamespaces(resourceUri, options) {
        for await (const segment of this.listSegmentOfMetricNamespaces(resourceUri, options)) {
            if (segment) {
                yield* segment;
            }
        }
    }
    /**
     *
     * Returns an async iterable iterator to list metric namespaces.
     *
     * Example using `for await` syntax:
     *
     * ```ts snippet:MetricQueryClientListMetricNamespaces
     * import { DefaultAzureCredential } from "@azure/identity";
     * import { MetricsQueryClient } from "@azure/monitor-query";
     *
     * const metricsResourceId = "<the Resource Id for your metrics resource>";
     *
     * const tokenCredential = new DefaultAzureCredential();
     * const metricsQueryClient = new MetricsQueryClient(tokenCredential);
     *
     * const metricNamespaces = metricsQueryClient.listMetricNamespaces(metricsResourceId);
     * for await (const { id, name } of metricNamespaces) {
     *   console.log(` metricNamespaces - ${id}, ${name}`);
     * }
     * ```
     *
     * Get a list of metric namespaces, given a resource URI.
     * @param resourceUri - The resource URI to get metric namespaces for.
     * @param options - Options for getting metric namespaces.
     * @returns Metric namespaces for a given resource URI.
     */
    listMetricNamespaces(resourceUri, options) {
        const iter = this.listItemsOfMetricNamespaces(resourceUri, options);
        return {
            /**
             * The next method, part of the iteration protocol
             */
            next() {
                return iter.next();
            },
            /**
             * The connection to the async iterator, part of the iteration protocol
             */
            [Symbol.asyncIterator]() {
                return this;
            },
            /**
             * @returns an AsyncIterableIterator that works a page at a time
             */
            byPage: () => {
                return this.listSegmentOfMetricNamespaces(resourceUri, options);
            },
        };
    }
}
exports.MetricsQueryClient = MetricsQueryClient;
//# sourceMappingURL=metricsQueryClient.js.map