{"version":3,"file":"metricsQueryClient.js","sourceRoot":"","sources":["../../src/metricsQueryClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { CommonClientOptions } from \"@azure/core-client\";\nimport { tracingClient } from \"./tracing.js\";\n\nimport type {\n  ListMetricDefinitionsOptions,\n  ListMetricNamespacesOptions,\n  MetricDefinition,\n  MetricNamespace,\n  MetricsQueryOptions,\n  MetricsQueryResult,\n} from \"./models/publicMetricsModels.js\";\n\nimport {\n  MonitorManagementClient as GeneratedMetricsClient,\n  KnownApiVersion20240201 as MetricsApiVersion,\n} from \"./generated/metrics/src/index.js\";\nimport {\n  MonitorManagementClient as GeneratedMetricsDefinitionsClient,\n  KnownApiVersion20240201 as MetricDefinitionsApiVersion,\n} from \"./generated/metricsdefinitions/src/index.js\";\nimport type { MetricNamespacesListOptionalParams } from \"./generated/metricsnamespaces/src/index.js\";\nimport {\n  MonitorManagementClient as GeneratedMetricsNamespacesClient,\n  KnownApiVersion20240201 as MetricNamespacesApiVersion,\n} from \"./generated/metricsnamespaces/src/index.js\";\nimport {\n  convertRequestForMetrics,\n  convertRequestOptionsForMetricsDefinitions,\n  convertResponseForMetricNamespaces,\n  convertResponseForMetrics,\n  convertResponseForMetricsDefinitions,\n} from \"./internal/modelConverters.js\";\nimport { SDK_VERSION, KnownMonitorMetricsQueryAudience } from \"./constants.js\";\n\n/**\n * Options for the MetricsQueryClient.\n */\nexport interface MetricsQueryClientOptions extends CommonClientOptions {\n  /** Overrides client endpoint. */\n  endpoint?: string;\n\n  /**\n   * The Audience to use for authentication with Microsoft Entra ID. The\n   * audience is not considered when using a shared key.\n   * {@link KnownMonitorMetricsQueryAudience} can be used interchangeably with audience\n   */\n  audience?: string;\n}\n\n/**\n * A client that can query metrics, get metric definitions and get metric namespaces.\n *\n * @deprecated For resource-centric metrics queries, use the management library `@azure/arm-monitor` instead.\n * Migrate your code following the migration guide at https://github.com/Azure/azure-sdk-for-js/blob/main/sdk/monitor/arm-monitor/MIGRATION_METRICSQUERYCLIENT_TO_ARM_MONITOR.md\n */\nexport class MetricsQueryClient {\n  private _metricsClient: GeneratedMetricsClient;\n  private _definitionsClient: GeneratedMetricsDefinitionsClient;\n  private _namespacesClient: GeneratedMetricsNamespacesClient;\n\n  /**\n   * Creates a MetricsQueryClient.\n   * @param tokenCredential - A TokenCredential that has rights to query metrics on resources.\n   * @param options - Options for the client like controlling request retries.\n   */\n  constructor(tokenCredential: TokenCredential, options?: MetricsQueryClientOptions) {\n    const scope: string = options?.audience\n      ? `${options.audience}/.default`\n      : `${KnownMonitorMetricsQueryAudience.AzurePublicCloud}/.default`;\n\n    const packageDetails = `azsdk-js-monitor-query/${SDK_VERSION}`;\n    const userAgentPrefix =\n      options?.userAgentOptions && options?.userAgentOptions.userAgentPrefix\n        ? `${options?.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n    const serviceClientOptions = {\n      ...options,\n      $host: options?.endpoint,\n      endpoint: options?.endpoint,\n      credentialScopes: scope,\n      credential: tokenCredential,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n    };\n\n    this._metricsClient = new GeneratedMetricsClient(\n      MetricsApiVersion.TwoThousandTwentyFour0201,\n      serviceClientOptions,\n    );\n\n    this._definitionsClient = new GeneratedMetricsDefinitionsClient(\n      MetricDefinitionsApiVersion.TwoThousandTwentyFour0201,\n      serviceClientOptions,\n    );\n\n    this._namespacesClient = new GeneratedMetricsNamespacesClient(\n      MetricNamespacesApiVersion.TwoThousandTwentyFour0201,\n      serviceClientOptions,\n    );\n  }\n\n  /**\n   * Query metrics, given a resource URI\n   * @param resourceUri - The resource URI to query.\n   * @param metricNames - The names of the metrics to retrieve.\n   * @param options - Options for querying metrics.\n   * @returns A response containing metrics.\n   */\n  async queryResource(\n    resourceUri: string,\n    metricNames: string[],\n    options: MetricsQueryOptions = {}, // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  ): Promise<MetricsQueryResult> {\n    return tracingClient.withSpan(\n      \"MetricsQueryClient.queryResource\",\n      options,\n      async (updatedOptions) => {\n        const response = await this._metricsClient.metrics.list(\n          resourceUri,\n          convertRequestForMetrics(metricNames, updatedOptions),\n        );\n\n        return convertResponseForMetrics(response);\n      },\n    );\n  }\n\n  /**\n   * List alert segments for Metric Definitions\n   */\n  private async *listSegmentOfMetricDefinitions(\n    resourceUri: string,\n    options: ListMetricDefinitionsOptions = {},\n  ): AsyncIterableIterator<Array<MetricDefinition>> {\n    const segmentResponse = await tracingClient.withSpan(\n      \"MetricsQueryClient.listSegmentOfMetricDefinitions\",\n      options,\n      async (updatedOptions) =>\n        this._definitionsClient.metricDefinitions.list(\n          resourceUri,\n          convertRequestOptionsForMetricsDefinitions(updatedOptions),\n        ),\n    );\n    yield convertResponseForMetricsDefinitions(segmentResponse.value);\n  }\n\n  /**\n   * List items for Metric Definitions\n   */\n  private async *listItemsOfMetricDefinitions(\n    resourceUri: string,\n    options?: ListMetricDefinitionsOptions,\n  ): AsyncIterableIterator<MetricDefinition> {\n    for await (const segment of this.listSegmentOfMetricDefinitions(resourceUri, options)) {\n      if (segment) {\n        yield* segment;\n      }\n    }\n  }\n\n  /**\n   *   /**\n   *\n   * Returns an async iterable iterator to list metric definitions.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```ts snippet:MetricQueryClientListMetricDefinitions\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { MetricsQueryClient } from \"@azure/monitor-query\";\n   *\n   * const metricsResourceId = \"<the Resource Id for your metrics resource>\";\n   *\n   * const tokenCredential = new DefaultAzureCredential();\n   * const metricsQueryClient = new MetricsQueryClient(tokenCredential);\n   *\n   * const metricDefinitions = metricsQueryClient.listMetricDefinitions(metricsResourceId);\n   * for await (const { id, name } of metricDefinitions) {\n   *   console.log(` metricDefinitions - ${id}, ${name}`);\n   * }\n   * ```\n   *\n   * Get a list of metric definitions, given a resource URI.\n   * @param resourceUri - The resource URI to get metric definitions for.\n   * @param options - Options for getting metric definitions.\n   * @returns Metric definitions for a given resource URI.\n   */\n  listMetricDefinitions(\n    resourceUri: string,\n    options?: ListMetricDefinitionsOptions,\n  ): PagedAsyncIterableIterator<MetricDefinition> {\n    const iter = this.listItemsOfMetricDefinitions(resourceUri, options);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @returns an AsyncIterableIterator that works a page at a time\n       */\n      byPage: () => {\n        return this.listSegmentOfMetricDefinitions(resourceUri, options);\n      },\n    };\n  }\n\n  /**\n   * List alert segments for Metric Namespaces\n   */\n  private async *listSegmentOfMetricNamespaces(\n    resourceUri: string,\n    options: ListMetricNamespacesOptions = {},\n  ): AsyncIterableIterator<Array<MetricNamespace>> {\n    const segmentResponse = await tracingClient.withSpan(\n      \"MetricsQueryClient.listSegmentOfMetricNamespaces\",\n      options,\n      async (updatedOptions: MetricNamespacesListOptionalParams | undefined) =>\n        this._namespacesClient.metricNamespaces.list(resourceUri, updatedOptions),\n    );\n    yield convertResponseForMetricNamespaces(segmentResponse.value);\n  }\n  /**\n   * List items for Metric Namespaces\n   */\n  private async *listItemsOfMetricNamespaces(\n    resourceUri: string,\n    options?: ListMetricNamespacesOptions,\n  ): AsyncIterableIterator<MetricNamespace> {\n    for await (const segment of this.listSegmentOfMetricNamespaces(resourceUri, options)) {\n      if (segment) {\n        yield* segment;\n      }\n    }\n  }\n  /**\n   *\n   * Returns an async iterable iterator to list metric namespaces.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```ts snippet:MetricQueryClientListMetricNamespaces\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { MetricsQueryClient } from \"@azure/monitor-query\";\n   *\n   * const metricsResourceId = \"<the Resource Id for your metrics resource>\";\n   *\n   * const tokenCredential = new DefaultAzureCredential();\n   * const metricsQueryClient = new MetricsQueryClient(tokenCredential);\n   *\n   * const metricNamespaces = metricsQueryClient.listMetricNamespaces(metricsResourceId);\n   * for await (const { id, name } of metricNamespaces) {\n   *   console.log(` metricNamespaces - ${id}, ${name}`);\n   * }\n   * ```\n   *\n   * Get a list of metric namespaces, given a resource URI.\n   * @param resourceUri - The resource URI to get metric namespaces for.\n   * @param options - Options for getting metric namespaces.\n   * @returns Metric namespaces for a given resource URI.\n   */\n  listMetricNamespaces(\n    resourceUri: string,\n    options?: ListMetricNamespacesOptions,\n  ): PagedAsyncIterableIterator<MetricNamespace> {\n    const iter = this.listItemsOfMetricNamespaces(resourceUri, options);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * @returns an AsyncIterableIterator that works a page at a time\n       */\n      byPage: () => {\n        return this.listSegmentOfMetricNamespaces(resourceUri, options);\n      },\n    };\n  }\n}\n"]}