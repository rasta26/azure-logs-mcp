// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { createMonitorQueryLogs } from "./api/index.js";
import { convertQueryBatch } from "./models/models.js";
import { batch as batchOperation, executeWithResourceId, execute } from "./api/operations.js";
import { convertTimespanToInterval } from "./static-helpers/timespanConversion.js";
/**
 * Converts LogsQueryOptions to internal option format
 */
function convertToInternalOptions(options) {
    if (!options) {
        return { requestOptions: {} };
    }
    // Convert LogsQueryOptions properties to prefer header format
    const preferParts = [];
    if (options.serverTimeoutInSeconds !== undefined) {
        preferParts.push(`wait=${options.serverTimeoutInSeconds}`);
    }
    if (options.includeQueryStatistics) {
        preferParts.push("include-statistics=true");
    }
    if (options.includeVisualization) {
        preferParts.push("include-render=true");
    }
    const prefer = preferParts.length > 0 ? preferParts.join(",") : undefined;
    return {
        prefer,
        requestOptions: options.requestOptions ? options.requestOptions : {},
    };
}
/**
 * The client to query Azure Monitor logs.
 */
export class LogsQueryClient {
    _client;
    /** The pipeline used by this client to make requests */
    pipeline;
    /**
     * Initializes a new instance of the LogsQueryClient.
     * @param tokenCredential - The credential to use for authentication.
     * @param options - The optional parameters for the client.
     */
    constructor(tokenCredential, options = {}) {
        const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;
        const userAgentPrefix = prefixFromOptions
            ? `${prefixFromOptions} azsdk-js-client`
            : `azsdk-js-client`;
        this._client = createMonitorQueryLogs(tokenCredential, {
            ...options,
            userAgentOptions: { userAgentPrefix },
        });
        this.pipeline = this._client.pipeline;
    }
    /**
     * Executes a batch of Analytics queries for data.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)
     * is an example for using POST with an Analytics query.
     * @param batch - The batch of queries to execute.
     * @param options - The optional parameters for the operation.
     * @returns The results of the batch of queries.
     */
    queryBatch(batch, options = { requestOptions: {} }) {
        const requests = batch.map((q, index) => {
            // Generate a unique ID for each query
            const id = `query-${index}`;
            // Convert public QueryBatch to internal InternalQueryBatch
            const internalQuery = convertQueryBatch(q, id);
            return {
                id: internalQuery.id,
                body: {
                    query: internalQuery.query,
                    timespan: internalQuery.timespan
                        ? convertTimespanToInterval(internalQuery.timespan)
                        : undefined,
                    workspaces: internalQuery.workspaces,
                },
                path: "/query",
                method: "POST",
                workspace: internalQuery.workspace,
                headers: internalQuery.headers,
            };
        });
        return batchOperation(this._client, { requests: requests }, options);
    }
    /**
     * Executes an Analytics query for data in the context of a resource.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)
     * is an example for using POST with an Analytics query.
     * @param resourceId - The resource ID to query the data for.
     * @param query - The query to execute.
     * @param timespan - The timespan for the query.
     * @param options - The optional parameters for the operation.
     * @returns The results of the query.
     */
    queryResource(resourceId, query, timespan, 
    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options
    options) {
        const internalOptions = convertToInternalOptions(options);
        const body = {
            query,
            timespan: convertTimespanToInterval(timespan),
            workspaces: options?.additionalWorkspaces,
        };
        return executeWithResourceId(this._client, resourceId, body, internalOptions);
    }
    /**
     * Executes an Analytics query for data.
     * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)
     * is an example for using POST with an Analytics query.
     * @param workspaceId - The workspace ID to query the data for.
     * @param query - The query to execute.
     * @param timespan - The timespan for the query.
     * @param options - The optional parameters for the operation.
     * @returns The results of the query.
     */
    queryWorkspace(workspaceId, query, timespan, 
    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options
    options) {
        const internalOptions = convertToInternalOptions(options);
        const body = {
            query,
            timespan: convertTimespanToInterval(timespan),
            workspaces: options?.additionalWorkspaces,
        };
        return execute(this._client, workspaceId, body, internalOptions);
    }
}
//# sourceMappingURL=logsQueryClient.js.map