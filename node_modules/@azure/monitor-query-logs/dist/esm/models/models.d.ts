import type { LogsQueryResult, QueryBatch, LogsQueryBatchResult } from "./public.js";
/** Converts public QueryBatch to internal InternalQueryBatch */
export declare function convertQueryBatch(query: QueryBatch, id: string): InternalQueryBatch;
/**
 * The timespan for the query. This is an ISO8601 time period value.
 * This timespan is applied in addition to any that are specified in the query expression.
 * */
export type QueryTimeInterval = {
    startTime: Date;
    endTime: Date;
} | {
    startTime: Date;
    duration: string;
} | {
    duration: string;
    endTime: Date;
} | {
    duration: string;
};
/**
 * The Analytics query. Learn more about the
 * [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
 */
export interface QueryBody {
    /** The query to execute. */
    query: string;
    /**
     * Optional. The timespan over which to query data. This is an ISO8601 time period
     * value.  This timespan is applied in addition to any that are specified in the
     * query expression.
     */
    timespan?: string;
    /** A list of workspaces to query in addition to the primary workspace. */
    workspaces?: string[];
}
export declare function queryBodySerializer(item: QueryBody): any;
/** Contains the tables, columns & rows resulting from a query. */
export interface QueryResults {
    /** The results of the query in tabular format. */
    tables: Table[];
    /** Statistics represented in JSON format. */
    statistics?: Record<string, any>;
    /** Visualization data in JSON format. */
    render?: Record<string, any>;
    /** The code and message for an error. */
    error?: ErrorInfo;
}
export declare function queryResultsDeserializer(item: {
    tables: any[];
    statistics: any;
    render: any;
    error: any;
}): QueryResults;
export declare function convertToLogsQueryResult(queryResults: QueryResults): LogsQueryResult;
export declare function tableArrayDeserializer(result: Array<Table>): any[];
/** Contains the columns and rows for one table in a query response. */
export interface Table {
    /** The name of the table. */
    name: string;
    /** The list of columns in this table. */
    columns: Column[];
    /** The resulting rows from this query. */
    rows: any[][];
}
export declare function tableDeserializer(item: {
    name: string;
    columns: any[];
    rows: any[][];
}): Table;
export declare function columnArrayDeserializer(result: Array<Column>): any[];
/** A column in a table. */
export interface Column {
    /** The name of this column. */
    name: string;
    /** The data type of this column. */
    type: ColumnDataType;
}
export declare function columnDeserializer(item: {
    name: string;
    type: any;
}): Column;
/** The data type of a column. */
export type ColumnDataType = "bool" | "datetime" | "dynamic" | "int" | "long" | "real" | "string" | "guid" | "decimal" | "timespan";
/** The code and message for an error. */
export interface ErrorInfo {
    /** A machine readable error code. */
    code: string;
    /** A human readable error message. */
    message: string;
    /** error details. */
    details?: ErrorDetail[];
    /** Inner error details if they exist. */
    innererror?: ErrorInfo;
    /** Additional properties that can be provided on the error info object */
    additionalProperties?: Record<string, any>;
}
export declare function errorInfoDeserializer(item: {
    code: any;
    message: any;
    details: any;
    innererror: any;
    additionalProperties: any;
}): ErrorInfo;
export declare function errorDetailArrayDeserializer(result: Array<ErrorDetail>): any[];
/** Error details. */
export interface ErrorDetail {
    /** The error's code. */
    code: string;
    /** A human readable error message. */
    message: string;
    /** Indicates which property in the request is responsible for the error. */
    target?: string;
    /** Indicates which value in 'target' is responsible for the error. */
    value?: string;
    /** Indicates resources which were responsible for the error. */
    resources?: string[];
    /** Additional properties that can be provided on the error details object */
    additionalProperties?: Record<string, any>;
}
export declare function errorDetailDeserializer(item: {
    code: any;
    message: any;
    target?: any;
    value?: any;
    resources?: any;
    additionalProperties?: any;
}): ErrorDetail;
/** Contains details when the response code indicates an error. */
export interface ErrorResponse {
    /** The error details. */
    error: ErrorInfo;
}
export declare function errorResponseDeserializer(item: {
    error: any;
}): ErrorResponse;
/** A single request in a batch. */
export interface InternalQueryBatch {
    /** Unique ID corresponding to each request in the batch. */
    id: string;
    /**
     * The Analytics query. Learn more about the [Analytics query
     * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     */
    query: string;
    /**
     * The timespan over which to query data. This is an ISO8601 time period
     * value.  This timespan is applied in addition to any that are specified in the
     * query expression.
     */
    timespan: QueryTimeInterval;
    /**
     * Headers of the request. Can use prefer header to set server timeout and to
     * query statistics and visualization information.
     */
    headers?: Record<string, string>;
    /** A list of workspaces to query in addition to the primary workspace. */
    workspaces?: string[];
    /**
     * Primary Workspace ID of the query. This is the Workspace ID from the Properties
     * blade in the Azure portal.
     */
    workspace: string;
}
/** An array of requests. */
export interface BatchRequest {
    /** An single request in a batch. */
    requests: BatchQueryRequest[];
}
export declare function batchRequestSerializer(item: BatchRequest): any;
export declare function batchQueryRequestArraySerializer(result: Array<BatchQueryRequest>): any[];
/** A single request in a batch. */
export interface BatchQueryRequest {
    /** Unique ID corresponding to each request in the batch. */
    id: string;
    /**
     * Headers of the request. Can use prefer header to set server timeout and to
     * query statistics and visualization information.
     */
    headers?: Record<string, string>;
    /**
     * The Analytics query. Learn more about the
     * [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)
     */
    body: QueryBody;
    /** The path for the batch query request. */
    path: "/query";
    /** The method of a single request in a batch. */
    method: "POST";
    /**
     * Primary Workspace ID of the query. This is the Workspace ID from the Properties
     * blade in the Azure portal.
     */
    workspace: string;
}
export declare function batchQueryRequestSerializer(item: BatchQueryRequest): any;
/** Response to a batch query. */
export interface InternalBatchResult {
    /** An array of responses corresponding to each individual request in a batch. */
    responses?: BatchQueryResponse[];
}
export declare function batchResponseDeserializer(item: {
    responses: any;
}): InternalBatchResult;
/** Converts InternalBatchResult to LogsQueryBatchResult */
export declare function convertToLogsBatchResult(internalResult: InternalBatchResult): LogsQueryBatchResult;
export declare function batchQueryResponseArrayDeserializer(result: Array<BatchQueryResponse>): any[];
/** Contains the batch query response and the headers, id, and status of the request */
export interface BatchQueryResponse {
    /** Unique ID corresponding to each request in the batch. */
    id?: string;
    /** The HTTP status code of the response. */
    status?: number;
    /** Contains the tables, columns & rows resulting from a query. */
    body?: BatchQueryResults;
    /** Dictionary of <string> */
    headers?: Record<string, string>;
}
export declare function batchQueryResponseDeserializer(item: {
    id?: any;
    status?: any;
    body?: any;
    headers?: any;
}): BatchQueryResponse;
/** Contains the tables, columns & rows resulting from a query. */
export interface BatchQueryResults {
    /** The results of the query in tabular format. */
    tables?: Table[];
    /** Statistics represented in JSON format. */
    statistics?: Record<string, any>;
    /** Visualization data in JSON format. */
    render?: Record<string, any>;
    /** The code and message for an error. */
    error?: ErrorInfo;
}
export declare function batchQueryResultsDeserializer(item: {
    tables: any;
    statistics: any;
    render: any;
    error: any;
}): BatchQueryResults;
//# sourceMappingURL=models.d.ts.map