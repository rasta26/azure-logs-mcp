{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/models/models.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  LogsQueryResult,\n  LogsTable,\n  LogsErrorInfo,\n  QueryBatch,\n  LogsQueryBatchResult,\n  LogsQueryError,\n  LogsQuerySuccessfulResult,\n  LogsQueryPartialResult,\n} from \"./public.js\";\nimport { LogsQueryResultStatus } from \"./public.js\";\n\n/** Converts public QueryBatch to internal InternalQueryBatch */\nexport function convertQueryBatch(query: QueryBatch, id: string): InternalQueryBatch {\n  const headers: Record<string, string> = {};\n\n  // Build prefer header from options\n  const preferParts: string[] = [];\n  if (query.serverTimeoutInSeconds) {\n    preferParts.push(`wait=${query.serverTimeoutInSeconds}`);\n  }\n  if (query.includeQueryStatistics) {\n    preferParts.push(\"include-statistics=true\");\n  }\n  if (query.includeVisualization) {\n    preferParts.push(\"include-render=true\");\n  }\n\n  if (preferParts.length > 0) {\n    headers.prefer = preferParts.join(\",\");\n  }\n\n  return {\n    id,\n    query: query.query,\n    timespan: query.timespan,\n    headers: Object.keys(headers).length > 0 ? headers : undefined,\n    workspaces: query.additionalWorkspaces,\n    workspace: query.workspaceId,\n  };\n}\n\n/**\n * The timespan for the query. This is an ISO8601 time period value.\n * This timespan is applied in addition to any that are specified in the query expression.\n * */\nexport type QueryTimeInterval =\n  | {\n      startTime: Date;\n      endTime: Date;\n    }\n  | {\n      startTime: Date;\n      duration: string;\n    }\n  | {\n      duration: string;\n      endTime: Date;\n    }\n  | {\n      duration: string;\n    };\n\n/**\n * The Analytics query. Learn more about the\n * [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)\n */\nexport interface QueryBody {\n  /** The query to execute. */\n  query: string;\n  /**\n   * Optional. The timespan over which to query data. This is an ISO8601 time period\n   * value.  This timespan is applied in addition to any that are specified in the\n   * query expression.\n   */\n  timespan?: string;\n  /** A list of workspaces to query in addition to the primary workspace. */\n  workspaces?: string[];\n}\n\nexport function queryBodySerializer(item: QueryBody): any {\n  return {\n    query: item[\"query\"],\n    timespan: item[\"timespan\"],\n    workspaces: !item[\"workspaces\"]\n      ? item[\"workspaces\"]\n      : item[\"workspaces\"].map((p: any) => {\n          return p;\n        }),\n  };\n}\n\n/** Contains the tables, columns & rows resulting from a query. */\nexport interface QueryResults {\n  /** The results of the query in tabular format. */\n  tables: Table[];\n  /** Statistics represented in JSON format. */\n  statistics?: Record<string, any>;\n  /** Visualization data in JSON format. */\n  render?: Record<string, any>;\n  /** The code and message for an error. */\n  error?: ErrorInfo;\n}\n\nexport function queryResultsDeserializer(item: {\n  tables: any[];\n  statistics: any;\n  render: any;\n  error: any;\n}): QueryResults {\n  return {\n    tables: tableArrayDeserializer(item[\"tables\"]),\n    statistics: item[\"statistics\"],\n    render: item[\"render\"],\n    error: !item[\"error\"] ? item[\"error\"] : errorInfoDeserializer(item[\"error\"]),\n  };\n}\n\n/**\n * Converts a table from the API response to LogsTable format with proper type conversion\n */\nfunction convertTable(table: Table): LogsTable {\n  const dynamicsIndices: number[] = [];\n  const datesIndices: number[] = [];\n\n  // Find indices of columns that need special conversion\n  for (let i = 0; i < table.columns.length; ++i) {\n    if (table.columns[i].type === \"datetime\") {\n      datesIndices.push(i);\n    } else if (table.columns[i].type === \"dynamic\") {\n      dynamicsIndices.push(i);\n    }\n  }\n\n  return {\n    name: table.name,\n    columnDescriptors: table.columns,\n    rows: table.rows.map((originalRow) => {\n      // Create a copy of the row to avoid mutating the original\n      const row = [...originalRow];\n\n      // Convert datetime columns to Date objects\n      for (const dateIndex of datesIndices) {\n        if (row[dateIndex] != null && typeof row[dateIndex] === \"string\") {\n          row[dateIndex] = new Date(row[dateIndex] as string);\n        }\n      }\n\n      // Convert dynamic columns to JSON objects\n      for (const dynamicIndex of dynamicsIndices) {\n        try {\n          if (row[dynamicIndex] != null && typeof row[dynamicIndex] === \"string\") {\n            row[dynamicIndex] = JSON.parse(row[dynamicIndex] as string) as Record<string, unknown>;\n          }\n        } catch (_err: any) {\n          /* leave as is if JSON parse fails */\n        }\n      }\n\n      return row;\n    }),\n  };\n}\n\nexport function convertToLogsQueryResult(queryResults: QueryResults): LogsQueryResult {\n  // Convert tables to LogsTable format with proper type conversion\n  const convertedTables: LogsTable[] = queryResults.tables.map(convertTable);\n\n  // If there's an error, return a partial result\n  if (queryResults.error) {\n    return {\n      status: LogsQueryResultStatus.PartialFailure,\n      partialTables: convertedTables,\n      partialError: queryResults.error as LogsErrorInfo,\n      statistics: queryResults.statistics,\n      visualization: queryResults.render,\n    };\n  }\n\n  // Otherwise, return a successful result\n  return {\n    status: LogsQueryResultStatus.Success,\n    tables: convertedTables,\n    statistics: queryResults.statistics,\n    visualization: queryResults.render,\n  };\n}\n\nexport function tableArrayDeserializer(result: Array<Table>): any[] {\n  return result.map((item) => {\n    return tableDeserializer(item);\n  });\n}\n\n/** Contains the columns and rows for one table in a query response. */\nexport interface Table {\n  /** The name of the table. */\n  name: string;\n  /** The list of columns in this table. */\n  columns: Column[];\n  /** The resulting rows from this query. */\n  rows: any[][];\n}\n\nexport function tableDeserializer(item: { name: string; columns: any[]; rows: any[][] }): Table {\n  return {\n    name: item[\"name\"],\n    columns: columnArrayDeserializer(item[\"columns\"]),\n    rows: item[\"rows\"].map((row: any[]) => {\n      return row.map((cell: any) => {\n        return cell;\n      });\n    }),\n  };\n}\n\nexport function columnArrayDeserializer(result: Array<Column>): any[] {\n  return result.map((item) => {\n    return columnDeserializer(item);\n  });\n}\n\n/** A column in a table. */\nexport interface Column {\n  /** The name of this column. */\n  name: string;\n  /** The data type of this column. */\n  type: ColumnDataType;\n}\n\nexport function columnDeserializer(item: { name: string; type: any }): Column {\n  return {\n    name: item[\"name\"],\n    type: item[\"type\"],\n  };\n}\n\n/** The data type of a column. */\nexport type ColumnDataType =\n  | \"bool\"\n  | \"datetime\"\n  | \"dynamic\"\n  | \"int\"\n  | \"long\"\n  | \"real\"\n  | \"string\"\n  | \"guid\"\n  | \"decimal\"\n  | \"timespan\";\n\n/** The code and message for an error. */\nexport interface ErrorInfo {\n  /** A machine readable error code. */\n  code: string;\n  /** A human readable error message. */\n  message: string;\n  /** error details. */\n  details?: ErrorDetail[];\n  /** Inner error details if they exist. */\n  innererror?: ErrorInfo;\n  /** Additional properties that can be provided on the error info object */\n  additionalProperties?: Record<string, any>;\n}\n\nexport function errorInfoDeserializer(item: {\n  code: any;\n  message: any;\n  details: any;\n  innererror: any;\n  additionalProperties: any;\n}): ErrorInfo {\n  return {\n    code: item[\"code\"],\n    message: item[\"message\"],\n    details: !item[\"details\"] ? item[\"details\"] : errorDetailArrayDeserializer(item[\"details\"]),\n    innererror: !item[\"innererror\"]\n      ? item[\"innererror\"]\n      : errorInfoDeserializer(item[\"innererror\"]),\n    additionalProperties: item[\"additionalProperties\"],\n  };\n}\n\nexport function errorDetailArrayDeserializer(result: Array<ErrorDetail>): any[] {\n  return result.map((item) => {\n    return errorDetailDeserializer(item);\n  });\n}\n\n/** Error details. */\nexport interface ErrorDetail {\n  /** The error's code. */\n  code: string;\n  /** A human readable error message. */\n  message: string;\n  /** Indicates which property in the request is responsible for the error. */\n  target?: string;\n  /** Indicates which value in 'target' is responsible for the error. */\n  value?: string;\n  /** Indicates resources which were responsible for the error. */\n  resources?: string[];\n  /** Additional properties that can be provided on the error details object */\n  additionalProperties?: Record<string, any>;\n}\n\nexport function errorDetailDeserializer(item: {\n  code: any;\n  message: any;\n  target?: any;\n  value?: any;\n  resources?: any;\n  additionalProperties?: any;\n}): ErrorDetail {\n  return {\n    code: item[\"code\"],\n    message: item[\"message\"],\n    target: item[\"target\"],\n    value: item[\"value\"],\n    resources: !item[\"resources\"]\n      ? item[\"resources\"]\n      : item[\"resources\"].map((p: any) => {\n          return p;\n        }),\n    additionalProperties: item[\"additionalProperties\"],\n  };\n}\n\n/** Contains details when the response code indicates an error. */\nexport interface ErrorResponse {\n  /** The error details. */\n  error: ErrorInfo;\n}\n\nexport function errorResponseDeserializer(item: { error: any }): ErrorResponse {\n  return {\n    error: errorInfoDeserializer(item[\"error\"]),\n  };\n}\n\n/** A single request in a batch. */\nexport interface InternalQueryBatch {\n  /** Unique ID corresponding to each request in the batch. */\n  id: string;\n  /**\n   * The Analytics query. Learn more about the [Analytics query\n   * syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)\n   */\n  query: string;\n  /**\n   * The timespan over which to query data. This is an ISO8601 time period\n   * value.  This timespan is applied in addition to any that are specified in the\n   * query expression.\n   */\n  timespan: QueryTimeInterval;\n  /**\n   * Headers of the request. Can use prefer header to set server timeout and to\n   * query statistics and visualization information.\n   */\n  headers?: Record<string, string>;\n  /** A list of workspaces to query in addition to the primary workspace. */\n  workspaces?: string[];\n  /**\n   * Primary Workspace ID of the query. This is the Workspace ID from the Properties\n   * blade in the Azure portal.\n   */\n  workspace: string;\n}\n\n/** An array of requests. */\nexport interface BatchRequest {\n  /** An single request in a batch. */\n  requests: BatchQueryRequest[];\n}\n\nexport function batchRequestSerializer(item: BatchRequest): any {\n  return { requests: batchQueryRequestArraySerializer(item[\"requests\"]) };\n}\n\nexport function batchQueryRequestArraySerializer(result: Array<BatchQueryRequest>): any[] {\n  return result.map((item) => {\n    return batchQueryRequestSerializer(item);\n  });\n}\n\n/** A single request in a batch. */\nexport interface BatchQueryRequest {\n  /** Unique ID corresponding to each request in the batch. */\n  id: string;\n  /**\n   * Headers of the request. Can use prefer header to set server timeout and to\n   * query statistics and visualization information.\n   */\n  headers?: Record<string, string>;\n  /**\n   * The Analytics query. Learn more about the\n   * [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)\n   */\n  body: QueryBody;\n  /** The path for the batch query request. */\n  path: \"/query\";\n  /** The method of a single request in a batch. */\n  method: \"POST\";\n  /**\n   * Primary Workspace ID of the query. This is the Workspace ID from the Properties\n   * blade in the Azure portal.\n   */\n  workspace: string;\n}\n\nexport function batchQueryRequestSerializer(item: BatchQueryRequest): any {\n  return {\n    id: item[\"id\"],\n    headers: item[\"headers\"],\n    body: queryBodySerializer(item[\"body\"]),\n    path: item[\"path\"],\n    method: item[\"method\"],\n    workspace: item[\"workspace\"],\n  };\n}\n\n/** Response to a batch query. */\nexport interface InternalBatchResult {\n  /** An array of responses corresponding to each individual request in a batch. */\n  responses?: BatchQueryResponse[];\n}\n\nexport function batchResponseDeserializer(item: { responses: any }): InternalBatchResult {\n  return {\n    responses: !item[\"responses\"]\n      ? item[\"responses\"]\n      : batchQueryResponseArrayDeserializer(item[\"responses\"]),\n  };\n}\n\n/** Converts InternalBatchResult to LogsQueryBatchResult */\nexport function convertToLogsBatchResult(\n  internalResult: InternalBatchResult,\n): LogsQueryBatchResult {\n  if (!internalResult.responses) {\n    return [];\n  }\n\n  return internalResult.responses.map(\n    (response): LogsQuerySuccessfulResult | LogsQueryPartialResult | LogsQueryError => {\n      // If the response has no body, it's an error\n      if (!response.body) {\n        const error: LogsQueryError = {\n          name: \"LogsQueryError\",\n          message: \"Query failed with no response body\",\n          code: response.status?.toString() || \"Unknown\",\n          status: LogsQueryResultStatus.Failure,\n        };\n        return error;\n      }\n\n      // Convert BatchQueryResults to QueryResults format for converter\n      const queryResults: QueryResults = {\n        tables: response.body.tables || [],\n        statistics: response.body.statistics,\n        render: response.body.render,\n        error: response.body.error,\n      };\n\n      // Convert using the existing converter\n      const queryResult = convertToLogsQueryResult(queryResults);\n\n      // If the converted result has an error status, create a LogsQueryError\n      if (queryResult.status === LogsQueryResultStatus.PartialFailure) {\n        return queryResult as LogsQueryPartialResult;\n      }\n\n      return queryResult as LogsQuerySuccessfulResult;\n    },\n  );\n}\n\nexport function batchQueryResponseArrayDeserializer(result: Array<BatchQueryResponse>): any[] {\n  return result.map((item) => {\n    return batchQueryResponseDeserializer(item);\n  });\n}\n\n/** Contains the batch query response and the headers, id, and status of the request */\nexport interface BatchQueryResponse {\n  /** Unique ID corresponding to each request in the batch. */\n  id?: string;\n  /** The HTTP status code of the response. */\n  status?: number;\n  /** Contains the tables, columns & rows resulting from a query. */\n  body?: BatchQueryResults;\n  /** Dictionary of <string> */\n  headers?: Record<string, string>;\n}\n\nexport function batchQueryResponseDeserializer(item: {\n  id?: any;\n  status?: any;\n  body?: any;\n  headers?: any;\n}): BatchQueryResponse {\n  return {\n    id: item[\"id\"],\n    status: item[\"status\"],\n    body: !item[\"body\"] ? item[\"body\"] : batchQueryResultsDeserializer(item[\"body\"]),\n    headers: item[\"headers\"],\n  };\n}\n\n/** Contains the tables, columns & rows resulting from a query. */\nexport interface BatchQueryResults {\n  /** The results of the query in tabular format. */\n  tables?: Table[];\n  /** Statistics represented in JSON format. */\n  statistics?: Record<string, any>;\n  /** Visualization data in JSON format. */\n  render?: Record<string, any>;\n  /** The code and message for an error. */\n  error?: ErrorInfo;\n}\n\nexport function batchQueryResultsDeserializer(item: {\n  tables: any;\n  statistics: any;\n  render: any;\n  error: any;\n}): BatchQueryResults {\n  return {\n    tables: !item[\"tables\"] ? item[\"tables\"] : tableArrayDeserializer(item[\"tables\"]),\n    statistics: item[\"statistics\"],\n    render: item[\"render\"],\n    error: !item[\"error\"] ? item[\"error\"] : errorInfoDeserializer(item[\"error\"]),\n  };\n}\n"]}