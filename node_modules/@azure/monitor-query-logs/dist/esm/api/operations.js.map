{"version":3,"file":"operations.js","sourceRoot":"","sources":["../../../src/api/operations.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { MonitorQueryLogsContext as Client, LogsQueryBatchOptions } from \"./index.js\";\nimport type { QueryBody, BatchRequest } from \"../models/models.js\";\nimport type { LogsQueryBatchResult, LogsQueryResult } from \"../models/public.js\";\nimport {\n  queryBodySerializer,\n  queryResultsDeserializer,\n  convertToLogsQueryResult,\n  errorResponseDeserializer,\n  batchRequestSerializer,\n  batchResponseDeserializer,\n  convertToLogsBatchResult,\n} from \"../models/models.js\";\nimport { expandUrlTemplate } from \"../static-helpers/urlTemplate.js\";\nimport type { ExecuteWithResourceIdOptionalParams, ExecuteOptionalParams } from \"./options.js\";\nimport type { StreamableMethod, PathUncheckedResponse } from \"@azure-rest/core-client\";\nimport { createRestError, operationOptionsToRequestParameters } from \"@azure-rest/core-client\";\n\nexport function _batchSend(\n  context: Client,\n  body: BatchRequest,\n  options: LogsQueryBatchOptions = { requestOptions: {} },\n): StreamableMethod {\n  return context.path(\"/$batch\").post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: batchRequestSerializer(body),\n  });\n}\n\nexport async function _batchDeserialize(\n  result: PathUncheckedResponse,\n): Promise<LogsQueryBatchResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  const internalResult = batchResponseDeserializer(result.body);\n  return convertToLogsBatchResult(internalResult);\n}\n\n/**\n * Executes a batch of Analytics queries for data.\n * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)\n * is an example for using POST with an Analytics query.\n */\nexport async function batch(\n  context: Client,\n  body: BatchRequest,\n  options: LogsQueryBatchOptions = { requestOptions: {} },\n): Promise<LogsQueryBatchResult> {\n  const result = await _batchSend(context, body, options);\n  return _batchDeserialize(result);\n}\n\nexport function _executeWithResourceIdSend(\n  context: Client,\n  resourceId: string,\n  body: QueryBody,\n  options: ExecuteWithResourceIdOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/{+resourceId}/query\",\n    {\n      resourceId: resourceId,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      ...(options?.prefer !== undefined ? { Prefer: options?.prefer } : {}),\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: queryBodySerializer(body),\n  });\n}\n\nexport async function _executeWithResourceIdDeserialize(\n  result: PathUncheckedResponse,\n): Promise<LogsQueryResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  return convertToLogsQueryResult(queryResultsDeserializer(result.body));\n}\n\n/**\n * Executes an Analytics query for data in the context of a resource.\n * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)\n * is an example for using POST with an Analytics query.\n */\nexport async function executeWithResourceId(\n  context: Client,\n  resourceId: string,\n  body: QueryBody,\n  options: ExecuteWithResourceIdOptionalParams = { requestOptions: {} },\n): Promise<LogsQueryResult> {\n  const result = await _executeWithResourceIdSend(context, resourceId, body, options);\n  return _executeWithResourceIdDeserialize(result);\n}\n\nexport function _executeSend(\n  context: Client,\n  workspaceId: string,\n  body: QueryBody,\n  options: ExecuteOptionalParams = { requestOptions: {} },\n): StreamableMethod {\n  const path = expandUrlTemplate(\n    \"/workspaces/{workspaceId}/query\",\n    {\n      workspaceId: workspaceId,\n    },\n    {\n      allowReserved: options?.requestOptions?.skipUrlEncoding,\n    },\n  );\n  return context.path(path).post({\n    ...operationOptionsToRequestParameters(options),\n    contentType: \"application/json\",\n    headers: {\n      ...(options?.prefer !== undefined ? { Prefer: options?.prefer } : {}),\n      accept: \"application/json\",\n      ...options.requestOptions?.headers,\n    },\n    body: queryBodySerializer(body),\n  });\n}\n\nexport async function _executeDeserialize(result: PathUncheckedResponse): Promise<LogsQueryResult> {\n  const expectedStatuses = [\"200\"];\n  if (!expectedStatuses.includes(result.status)) {\n    const error = createRestError(result);\n    error.details = errorResponseDeserializer(result.body);\n    throw error;\n  }\n\n  return convertToLogsQueryResult(queryResultsDeserializer(result.body));\n}\n\n/**\n * Executes an Analytics query for data.\n * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)\n * is an example for using POST with an Analytics query.\n */\nexport async function execute(\n  context: Client,\n  workspaceId: string,\n  body: QueryBody,\n  options: ExecuteOptionalParams = { requestOptions: {} },\n): Promise<LogsQueryResult> {\n  const result = await _executeSend(context, workspaceId, body, options);\n  return _executeDeserialize(result);\n}\n"]}