{"version":3,"file":"logsQueryClient.js","sourceRoot":"","sources":["../../src/logsQueryClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { MonitorQueryLogsContext, LogsQueryClientOptions } from \"./api/index.js\";\nimport { createMonitorQueryLogs } from \"./api/index.js\";\nimport type { QueryTimeInterval } from \"./models/models.js\";\nimport { convertQueryBatch } from \"./models/models.js\";\nimport type { QueryBatch, LogsQueryBatchResult } from \"./models/public.js\";\nimport type { QueryBody } from \"./models/models.js\";\nimport type { LogsQueryBatchOptions, LogsQueryOptions } from \"./api/options.js\";\nimport { batch as batchOperation, executeWithResourceId, execute } from \"./api/operations.js\";\nimport type { Pipeline } from \"@azure/core-rest-pipeline\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { BatchQueryRequest } from \"./models/index.js\";\nimport { convertTimespanToInterval } from \"./static-helpers/timespanConversion.js\";\nimport type { LogsQueryResult } from \"./models/public.js\";\n\nexport { LogsQueryClientOptions } from \"./api/monitorQueryLogsContext.js\";\n\n/**\n * Converts LogsQueryOptions to internal option format\n */\nfunction convertToInternalOptions(options?: LogsQueryOptions): {\n  prefer?: string;\n  requestOptions: {};\n} {\n  if (!options) {\n    return { requestOptions: {} };\n  }\n\n  // Convert LogsQueryOptions properties to prefer header format\n  const preferParts: string[] = [];\n\n  if (options.serverTimeoutInSeconds !== undefined) {\n    preferParts.push(`wait=${options.serverTimeoutInSeconds}`);\n  }\n\n  if (options.includeQueryStatistics) {\n    preferParts.push(\"include-statistics=true\");\n  }\n\n  if (options.includeVisualization) {\n    preferParts.push(\"include-render=true\");\n  }\n\n  const prefer = preferParts.length > 0 ? preferParts.join(\",\") : undefined;\n\n  return {\n    prefer,\n    requestOptions: options.requestOptions ? options.requestOptions : {},\n  };\n}\n\n/**\n * The client to query Azure Monitor logs.\n */\nexport class LogsQueryClient {\n  private _client: MonitorQueryLogsContext;\n  /** The pipeline used by this client to make requests */\n  public readonly pipeline: Pipeline;\n\n  /**\n   * Initializes a new instance of the LogsQueryClient.\n   * @param tokenCredential - The credential to use for authentication.\n   * @param options - The optional parameters for the client.\n   */\n  constructor(tokenCredential: TokenCredential, options: LogsQueryClientOptions = {}) {\n    const prefixFromOptions = options?.userAgentOptions?.userAgentPrefix;\n    const userAgentPrefix = prefixFromOptions\n      ? `${prefixFromOptions} azsdk-js-client`\n      : `azsdk-js-client`;\n    this._client = createMonitorQueryLogs(tokenCredential, {\n      ...options,\n      userAgentOptions: { userAgentPrefix },\n    });\n    this.pipeline = this._client.pipeline;\n  }\n\n  /**\n   * Executes a batch of Analytics queries for data.\n   * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)\n   * is an example for using POST with an Analytics query.\n   * @param batch - The batch of queries to execute.\n   * @param options - The optional parameters for the operation.\n   * @returns The results of the batch of queries.\n   */\n  queryBatch(\n    batch: QueryBatch[],\n    options: LogsQueryBatchOptions = { requestOptions: {} },\n  ): Promise<LogsQueryBatchResult> {\n    const requests: BatchQueryRequest[] = batch.map((q, index) => {\n      // Generate a unique ID for each query\n      const id = `query-${index}`;\n      // Convert public QueryBatch to internal InternalQueryBatch\n      const internalQuery = convertQueryBatch(q, id);\n\n      return {\n        id: internalQuery.id,\n        body: {\n          query: internalQuery.query,\n          timespan: internalQuery.timespan\n            ? convertTimespanToInterval(internalQuery.timespan)\n            : undefined,\n          workspaces: internalQuery.workspaces,\n        },\n        path: \"/query\" as const,\n        method: \"POST\" as const,\n        workspace: internalQuery.workspace,\n        headers: internalQuery.headers,\n      };\n    });\n    return batchOperation(this._client, { requests: requests }, options);\n  }\n\n  /**\n   * Executes an Analytics query for data in the context of a resource.\n   * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)\n   * is an example for using POST with an Analytics query.\n   * @param resourceId - The resource ID to query the data for.\n   * @param query - The query to execute.\n   * @param timespan - The timespan for the query.\n   * @param options - The optional parameters for the operation.\n   * @returns The results of the query.\n   */\n  queryResource(\n    resourceId: string,\n    query: string,\n    timespan: QueryTimeInterval,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: LogsQueryOptions,\n  ): Promise<LogsQueryResult> {\n    const internalOptions = convertToInternalOptions(options);\n    const body: QueryBody = {\n      query,\n      timespan: convertTimespanToInterval(timespan),\n      workspaces: options?.additionalWorkspaces,\n    };\n    return executeWithResourceId(this._client, resourceId, body, internalOptions);\n  }\n\n  /**\n   * Executes an Analytics query for data.\n   * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)\n   * is an example for using POST with an Analytics query.\n   * @param workspaceId - The workspace ID to query the data for.\n   * @param query - The query to execute.\n   * @param timespan - The timespan for the query.\n   * @param options - The optional parameters for the operation.\n   * @returns The results of the query.\n   */\n  queryWorkspace(\n    workspaceId: string,\n    query: string,\n    timespan: QueryTimeInterval,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: LogsQueryOptions,\n  ): Promise<LogsQueryResult> {\n    const internalOptions = convertToInternalOptions(options);\n    const body: QueryBody = {\n      query,\n      timespan: convertTimespanToInterval(timespan),\n      workspaces: options?.additionalWorkspaces,\n    };\n    return execute(this._client, workspaceId, body, internalOptions);\n  }\n}\n"]}