import type { MonitorQueryLogsContext as Client, LogsQueryBatchOptions } from "./index.js";
import type { QueryBody, BatchRequest } from "../models/models.js";
import type { LogsQueryBatchResult, LogsQueryResult } from "../models/public.js";
import type { ExecuteWithResourceIdOptionalParams, ExecuteOptionalParams } from "./options.js";
import type { StreamableMethod, PathUncheckedResponse } from "@azure-rest/core-client";
export declare function _batchSend(context: Client, body: BatchRequest, options?: LogsQueryBatchOptions): StreamableMethod;
export declare function _batchDeserialize(result: PathUncheckedResponse): Promise<LogsQueryBatchResult>;
/**
 * Executes a batch of Analytics queries for data.
 * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/batch-queries)
 * is an example for using POST with an Analytics query.
 */
export declare function batch(context: Client, body: BatchRequest, options?: LogsQueryBatchOptions): Promise<LogsQueryBatchResult>;
export declare function _executeWithResourceIdSend(context: Client, resourceId: string, body: QueryBody, options?: ExecuteWithResourceIdOptionalParams): StreamableMethod;
export declare function _executeWithResourceIdDeserialize(result: PathUncheckedResponse): Promise<LogsQueryResult>;
/**
 * Executes an Analytics query for data in the context of a resource.
 * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/azure-resource-queries)
 * is an example for using POST with an Analytics query.
 */
export declare function executeWithResourceId(context: Client, resourceId: string, body: QueryBody, options?: ExecuteWithResourceIdOptionalParams): Promise<LogsQueryResult>;
export declare function _executeSend(context: Client, workspaceId: string, body: QueryBody, options?: ExecuteOptionalParams): StreamableMethod;
export declare function _executeDeserialize(result: PathUncheckedResponse): Promise<LogsQueryResult>;
/**
 * Executes an Analytics query for data.
 * [Here](https://learn.microsoft.com/azure/azure-monitor/logs/api/request-format)
 * is an example for using POST with an Analytics query.
 */
export declare function execute(context: Client, workspaceId: string, body: QueryBody, options?: ExecuteOptionalParams): Promise<LogsQueryResult>;
//# sourceMappingURL=operations.d.ts.map