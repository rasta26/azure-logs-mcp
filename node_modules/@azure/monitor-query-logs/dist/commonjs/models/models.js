"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertQueryBatch = convertQueryBatch;
exports.queryBodySerializer = queryBodySerializer;
exports.queryResultsDeserializer = queryResultsDeserializer;
exports.convertToLogsQueryResult = convertToLogsQueryResult;
exports.tableArrayDeserializer = tableArrayDeserializer;
exports.tableDeserializer = tableDeserializer;
exports.columnArrayDeserializer = columnArrayDeserializer;
exports.columnDeserializer = columnDeserializer;
exports.errorInfoDeserializer = errorInfoDeserializer;
exports.errorDetailArrayDeserializer = errorDetailArrayDeserializer;
exports.errorDetailDeserializer = errorDetailDeserializer;
exports.errorResponseDeserializer = errorResponseDeserializer;
exports.batchRequestSerializer = batchRequestSerializer;
exports.batchQueryRequestArraySerializer = batchQueryRequestArraySerializer;
exports.batchQueryRequestSerializer = batchQueryRequestSerializer;
exports.batchResponseDeserializer = batchResponseDeserializer;
exports.convertToLogsBatchResult = convertToLogsBatchResult;
exports.batchQueryResponseArrayDeserializer = batchQueryResponseArrayDeserializer;
exports.batchQueryResponseDeserializer = batchQueryResponseDeserializer;
exports.batchQueryResultsDeserializer = batchQueryResultsDeserializer;
const public_js_1 = require("./public.js");
/** Converts public QueryBatch to internal InternalQueryBatch */
function convertQueryBatch(query, id) {
    const headers = {};
    // Build prefer header from options
    const preferParts = [];
    if (query.serverTimeoutInSeconds) {
        preferParts.push(`wait=${query.serverTimeoutInSeconds}`);
    }
    if (query.includeQueryStatistics) {
        preferParts.push("include-statistics=true");
    }
    if (query.includeVisualization) {
        preferParts.push("include-render=true");
    }
    if (preferParts.length > 0) {
        headers.prefer = preferParts.join(",");
    }
    return {
        id,
        query: query.query,
        timespan: query.timespan,
        headers: Object.keys(headers).length > 0 ? headers : undefined,
        workspaces: query.additionalWorkspaces,
        workspace: query.workspaceId,
    };
}
function queryBodySerializer(item) {
    return {
        query: item["query"],
        timespan: item["timespan"],
        workspaces: !item["workspaces"]
            ? item["workspaces"]
            : item["workspaces"].map((p) => {
                return p;
            }),
    };
}
function queryResultsDeserializer(item) {
    return {
        tables: tableArrayDeserializer(item["tables"]),
        statistics: item["statistics"],
        render: item["render"],
        error: !item["error"] ? item["error"] : errorInfoDeserializer(item["error"]),
    };
}
/**
 * Converts a table from the API response to LogsTable format with proper type conversion
 */
function convertTable(table) {
    const dynamicsIndices = [];
    const datesIndices = [];
    // Find indices of columns that need special conversion
    for (let i = 0; i < table.columns.length; ++i) {
        if (table.columns[i].type === "datetime") {
            datesIndices.push(i);
        }
        else if (table.columns[i].type === "dynamic") {
            dynamicsIndices.push(i);
        }
    }
    return {
        name: table.name,
        columnDescriptors: table.columns,
        rows: table.rows.map((originalRow) => {
            // Create a copy of the row to avoid mutating the original
            const row = [...originalRow];
            // Convert datetime columns to Date objects
            for (const dateIndex of datesIndices) {
                if (row[dateIndex] != null && typeof row[dateIndex] === "string") {
                    row[dateIndex] = new Date(row[dateIndex]);
                }
            }
            // Convert dynamic columns to JSON objects
            for (const dynamicIndex of dynamicsIndices) {
                try {
                    if (row[dynamicIndex] != null && typeof row[dynamicIndex] === "string") {
                        row[dynamicIndex] = JSON.parse(row[dynamicIndex]);
                    }
                }
                catch (_err) {
                    /* leave as is if JSON parse fails */
                }
            }
            return row;
        }),
    };
}
function convertToLogsQueryResult(queryResults) {
    // Convert tables to LogsTable format with proper type conversion
    const convertedTables = queryResults.tables.map(convertTable);
    // If there's an error, return a partial result
    if (queryResults.error) {
        return {
            status: public_js_1.LogsQueryResultStatus.PartialFailure,
            partialTables: convertedTables,
            partialError: queryResults.error,
            statistics: queryResults.statistics,
            visualization: queryResults.render,
        };
    }
    // Otherwise, return a successful result
    return {
        status: public_js_1.LogsQueryResultStatus.Success,
        tables: convertedTables,
        statistics: queryResults.statistics,
        visualization: queryResults.render,
    };
}
function tableArrayDeserializer(result) {
    return result.map((item) => {
        return tableDeserializer(item);
    });
}
function tableDeserializer(item) {
    return {
        name: item["name"],
        columns: columnArrayDeserializer(item["columns"]),
        rows: item["rows"].map((row) => {
            return row.map((cell) => {
                return cell;
            });
        }),
    };
}
function columnArrayDeserializer(result) {
    return result.map((item) => {
        return columnDeserializer(item);
    });
}
function columnDeserializer(item) {
    return {
        name: item["name"],
        type: item["type"],
    };
}
function errorInfoDeserializer(item) {
    return {
        code: item["code"],
        message: item["message"],
        details: !item["details"] ? item["details"] : errorDetailArrayDeserializer(item["details"]),
        innererror: !item["innererror"]
            ? item["innererror"]
            : errorInfoDeserializer(item["innererror"]),
        additionalProperties: item["additionalProperties"],
    };
}
function errorDetailArrayDeserializer(result) {
    return result.map((item) => {
        return errorDetailDeserializer(item);
    });
}
function errorDetailDeserializer(item) {
    return {
        code: item["code"],
        message: item["message"],
        target: item["target"],
        value: item["value"],
        resources: !item["resources"]
            ? item["resources"]
            : item["resources"].map((p) => {
                return p;
            }),
        additionalProperties: item["additionalProperties"],
    };
}
function errorResponseDeserializer(item) {
    return {
        error: errorInfoDeserializer(item["error"]),
    };
}
function batchRequestSerializer(item) {
    return { requests: batchQueryRequestArraySerializer(item["requests"]) };
}
function batchQueryRequestArraySerializer(result) {
    return result.map((item) => {
        return batchQueryRequestSerializer(item);
    });
}
function batchQueryRequestSerializer(item) {
    return {
        id: item["id"],
        headers: item["headers"],
        body: queryBodySerializer(item["body"]),
        path: item["path"],
        method: item["method"],
        workspace: item["workspace"],
    };
}
function batchResponseDeserializer(item) {
    return {
        responses: !item["responses"]
            ? item["responses"]
            : batchQueryResponseArrayDeserializer(item["responses"]),
    };
}
/** Converts InternalBatchResult to LogsQueryBatchResult */
function convertToLogsBatchResult(internalResult) {
    if (!internalResult.responses) {
        return [];
    }
    return internalResult.responses.map((response) => {
        // If the response has no body, it's an error
        if (!response.body) {
            const error = {
                name: "LogsQueryError",
                message: "Query failed with no response body",
                code: response.status?.toString() || "Unknown",
                status: public_js_1.LogsQueryResultStatus.Failure,
            };
            return error;
        }
        // Convert BatchQueryResults to QueryResults format for converter
        const queryResults = {
            tables: response.body.tables || [],
            statistics: response.body.statistics,
            render: response.body.render,
            error: response.body.error,
        };
        // Convert using the existing converter
        const queryResult = convertToLogsQueryResult(queryResults);
        // If the converted result has an error status, create a LogsQueryError
        if (queryResult.status === public_js_1.LogsQueryResultStatus.PartialFailure) {
            return queryResult;
        }
        return queryResult;
    });
}
function batchQueryResponseArrayDeserializer(result) {
    return result.map((item) => {
        return batchQueryResponseDeserializer(item);
    });
}
function batchQueryResponseDeserializer(item) {
    return {
        id: item["id"],
        status: item["status"],
        body: !item["body"] ? item["body"] : batchQueryResultsDeserializer(item["body"]),
        headers: item["headers"],
    };
}
function batchQueryResultsDeserializer(item) {
    return {
        tables: !item["tables"] ? item["tables"] : tableArrayDeserializer(item["tables"]),
        statistics: item["statistics"],
        render: item["render"],
        error: !item["error"] ? item["error"] : errorInfoDeserializer(item["error"]),
    };
}
//# sourceMappingURL=models.js.map